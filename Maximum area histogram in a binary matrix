// { Driver Code Starts
import java.util.*;

class FindMinCost
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t > 0)
		{
			int n = sc.nextInt();
			int m = sc.nextInt();
			int arr[][] = new int[n][m];
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<m; j++ )
				{
					arr[i][j] = sc.nextInt();
				}
			}
			System.out.println(new Solution().maxArea(arr, n, m));
		t--;
		}
	}
}// } Driver Code Ends


/*Complete the function given below*/
class Pair{
    int first;
    int second;
    Pair(int first, int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    // NSR function is to find the Next Shortest function in Right
    public int[] NSR(int arr[],int size){
        Pair[] arr1=new Pair[size];
        for(int i=0;i<size;i++){
            arr1[i]=new Pair(arr[i],i);
        }
        
        int res[]=new int[size];
        int itr=0;
        Stack<Pair> s=new Stack<Pair>();
        for(int i=size-1;i>=0;i--){
            if(s.size()==0){
                res[itr]=size;
            }
            else if(s.size()>0 && s.peek().first<arr1[i].first){
                res[itr]=s.peek().second;
            }
            else if(s.size()>0 && s.peek().first>=arr1[i].first){
                while(s.size()>0 && s.peek().first>=arr1[i].first){
                    s.pop();
                }
                if(s.size()==0){
                    res[itr]=size;
                }
                else{
                    res[itr]=s.peek().second;
                }
            }
            s.add(arr1[i]);
            itr++;
        }
        int t;
        for (int i = 0; i < size / 2; i++) {
            t = res[i];
            res[i] = res[size - i - 1];
            res[size - i - 1] = t;
        }
        return res;
    }
    
    // NSR function is to find the Next Shortest function in Left
    public int[] NSL(int arr[],int size){
        Pair[] arr1=new Pair[size];
        for(int i=0;i<size;i++){
            arr1[i]=new Pair(arr[i],i);
        }
        int res[]=new int[size];
        int itr=0;
        Stack<Pair> s=new Stack<Pair>();
        
        for(int i=0;i<size;i++){
            if(s.size()==0){
                res[itr]=-1;
            }
            else if(s.size()>0 && s.peek().first<arr1[i].first){
                res[itr]=s.peek().second;
            }
            else if(s.size()>0 && s.peek().first>=arr1[i].first){
                while(s.size()>0 && s.peek().first>=arr1[i].first){
                    s.pop();
                }
                if(s.size()==0){
                    res[itr]=-1;
                }
                else{
                    res[itr]=s.peek().second;
                }
            }
            s.add(arr1[i]);
            itr++;
        }
        return res;
    }
    
    // Area calculation for 1D array and returning the maximum area possible
    public int MAH(int arr[],int size){
        int left[]=new int[size];
        left=NSL(arr,size);
        int right[]=new int[size];
        right=NSR(arr,size);
        int width[]=new int[size];
        int area;
        int max=0;
        for(int i=0;i<size;i++){
            width[i]=right[i]-left[i]-1;
            area=width[i]*arr[i];
            max=Math.max(area,max);
        }
        return max;
    }
    
    // Function for calling MAH function individually on the matrix
    public int maxArea(int M[][], int n, int m) {
        int res=0;
        int arr1[]=new int[m];
        Arrays.fill(arr1,0);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(M[i][j]==0)
                    arr1[j]=0;
                else
                    arr1[j]+=M[i][j];
            }
            res=Math.max(res,MAH(arr1,m));
        }
        return res;
    }
}
